# -*- coding: utf-8 -*-
"""Movie_recomended_system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ezm4h_oosONHuFarqJuNVCxBl_cT5hxS
"""

import pandas as pd
import numpy as np

"""#### Load data"""

credits = pd.read_csv('tmdb_5000_credits.csv')
movies = pd.read_csv('tmdb_5000_movies.csv')

credits.sample(1)

movies.sample(1)

# Merge this two datasets

movies = movies.merge(credits, on='title')

# Drop columns

movies = movies[['movie_id', 'title', 'overview', 'genres', 'keywords', 'cast', 'crew']]

movies.head(1)

movies.duplicated().sum()

movies.isnull().sum()

movies.dropna(inplace=True)

movies['genres'].values

import ast

def convert(obj):
  L = []
  for i in ast.literal_eval(obj):
    L.append(i['name'])
  return L

movies['genres'] = movies['genres'].apply(convert)

movies['keywords'] = movies['keywords'].apply(convert)

def convert2(obj):
  L = []
  counter = 0
  for i in ast.literal_eval(obj):
    if counter !=3:
       L.append(i['name'])
       counter += 1
    else:
      break
  return L

movies['cast'] = movies['cast'].apply(convert2)

def fetch_director(obj):
  L = []
  for i in ast.literal_eval(obj):
    if i['job'] == 'Director':
       L.append(i['name'])
       break
  return L

movies['crew'] = movies['crew'].apply(fetch_director)

movies['overview'] = movies['overview'].apply(lambda x:x.split())

movies['genres'] = movies['genres'].apply(lambda x:[i.replace(' ','') for i in x])
movies['keywords'] = movies['keywords'].apply(lambda x:[i.replace(' ','') for i in x])
movies['cast'] = movies['cast'].apply(lambda x:[i.replace(' ','') for i in x])
movies['crew'] = movies['crew'].apply(lambda x:[i.replace(' ','') for i in x])

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

movies.head(1)

# Make a new df

df = movies[['movie_id','title','tags']]

df['tags'] = df['tags'].apply(lambda x:" ".join(x))

df['tags'] = df['tags'].apply(lambda x:x.lower())

df.head(1)

import nltk
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

def stem(text):
  y = []
  for i in text.split():
    y.append(ps.stem(i))
  return " ".join(y)

df['tags'] = df['tags'].apply(stem)

df.head(1)

from sklearn.feature_extraction.text import CountVectorizer # Import the CountVectorizer class
cv = CountVectorizer(max_features=5000, stop_words='english')

vectors = cv.fit_transform(df['tags']).toarray()

# Get the feature names (vocabulary)
feature_names = cv.get_feature_names_out()

# Display the first 100 feature names
print(feature_names[:100])

from sklearn.metrics.pairwise import cosine_similarity
similarity = cosine_similarity(vectors)

similarity[1]

def recommend(movie):
    movie_index = df[df['title'] == movie].index[0]
    distances = similarity[movie_index]
    movies_list = sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]

    for i in movies_list:
        print(df.iloc[i[0]].title)

recommend('Batman Begins')

import pickle


pickle.dump(df.to_dict(),open('movies_dict.pkl','wb'))
pickle.dump(similarity,open('similarity.pkl','wb'))

!pip install streamlit

import subprocess
import requests
import pickle
import pandas as pd
from pyngrok import ngrok
import streamlit as st

# Function to fetch the movie poster
def fetch_poster(movie_id):
    url = f"https://api.themoviedb.org/3/movie/{movie_id}?api_key=f4ecc60270fc9f2e3c295c3624843728&language=en-US"
    data = requests.get(url).json()
    poster_path = data['poster_path']
    return f"https://image.tmdb.org/t/p/w500/{poster_path}"

# Function to recommend movies based on similarity
def recommend(movie):
    movie_index = movies[movies['title'] == movie].index[0]
    distances = similarity[movie_index]
    movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]

    recommended_movies = []
    recommended_movies_posters = []

    for i in movies_list:
        movie_id = movies.iloc[i[0]].movie_id
        recommended_movies.append(movies.iloc[i[0]].title)
        recommended_movies_posters.append(fetch_poster(movie_id))
    return recommended_movies, recommended_movies_posters

# Load movies data
movies_dict = pickle.load(open('movies_dict.pkl', 'rb'))
movies = pd.DataFrame(movies_dict)

# Load similarity data
similarity = pickle.load(open('similarity.pkl', 'rb'))